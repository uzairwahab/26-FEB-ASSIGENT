Consider the below code to answer further questions:
import numpy as np
list_ = [ ‘1’ , ’2’ , ‘3’ , ‘4’ , ‘5’ ]
array_list = np.array(object = list_)
Q1. Is there any difference in the data type of variables list_ and array_list? If there is then write a code
to print the data types of both the variables.

ANS. Yes, there is a difference in the data type of variables list_ and array_list.

list_ is a list object containing string elements while array_list is a numpy array object created from the list_ object.

To print the data types of both the variables, we can use the type() function in Python as follows:

import numpy as np

list_ = ['1', '2', '3', '4', '5']
array_list = np.array(object=list_)

print("Data type of list_:", type(list_))
print("Data type of array_list:", type(array_list))

This will output:

Data type of list_: <class 'list'>
Data type of array_list: <class 'numpy.ndarray'>


Q2. Write a code to print the data type of each and every element of both the variables list_ and
arra_list.
 ANS. The data type of each element in the list_ variable can be printed using a for loop and the type() function as follows:

for elem in list_:
    print(type(elem))
The data type of each element in the array_list variable can be printed using the dtype attribute of the NumPy array as follows:

print(array_list.dtype)


Q3. Considering the following changes in the variable, array_list:
array_list = np.array(object = list_, dtype = int)
Will there be any difference in the data type of the elements present in both the variables, list_ and
arra_list? If so then print the data types of each and every element present in both the variables, list_
and arra_list.
Consider the below code to answer further questions:
import numpy as np
num_list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
num_array = np.array(object = num_list)

ANS. Assuming that list_ contains elements of integer type, there will not be any difference in the data type of the elements present in list_ and array_list.

To print the data types of each element present in both variables, you can use the dtype attribute of NumPy arrays and the type() function in Python for lists as follows:

import numpy as np

# define a list of integers
list_ = [1, 2, 3, 4, 5]

# convert the list to a NumPy array
array_list = np.array(object=list_, dtype=int)

# print the data types of each element in the list
for item in list_:
    print(type(item))

# print the data type of each element in the NumPy array
print(array_list.dtype)




Q4. Write a code to find the following characteristics of variable, num_array:
(i) shape
(ii) size

ANS. Assuming that num_array is a NumPy array, you can use the shape and size attributes to find the following characteristics:

import numpy as np

# define a 2D NumPy array
num_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
num_array = np.array(object=num_list)

# print the shape of the array
print("Shape of the array:", num_array.shape)

# print the size of the array
print("Size of the array:", num_array.size)

Q5. Write a code to create numpy array of 3*3 matrix containing zeros only, using a numpy array
creation function.
[Hint: The size of the array will be 9 and the shape will be (3,3).]

ANS. You can create a 3x3 NumPy array containing only zeros using the np.zeros() function as follows:

import numpy as np

# create a 3x3 array containing zeros
zeros_array = np.zeros(shape=(3, 3))

# print the array
print(zeros_array)
The output will be:


[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]

Q6. Create an identity matrix of shape (5,5) using numpy functions?
[Hint: An identity matrix is a matrix containing 1 diagonally and other elements will be 0.]

ANS. 
You can create a 5x5 identity matrix using the np.identity() function or the np.eye() function in NumPy as follows:

import numpy as np

# create a 5x5 identity matrix using np.identity()
identity_matrix = np.identity(n=5)

# print the matrix
print(identity_matrix)

# create a 5x5 identity matrix using np.eye()
identity_matrix2 = np.eye(N=5, M=5)

# print the matrix
print(identity_matrix2)
Both np.identity() and np.eye() functions create a square matrix with 1's along the diagonal and 0's elsewhere.

The output will be:

[[1. 0. 0. 0. 0.]
 [0. 1. 0. 0. 0.]
 [0. 0. 1. 0. 0.]
 [0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 1.]]

[[1. 0. 0. 0. 0.]
 [0. 1. 0. 0. 0.]
 [0. 0. 1. 0. 0.]
 [0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 1.]]
